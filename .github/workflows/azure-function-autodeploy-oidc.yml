# Prerequisite
# 1. Have Service Principal with Microsoft Graph Application Permission
#       Application.ReadWrite.All
#       AppRoleAssignmentReadWrite.All (Useful for Identity work)
#       Grant Admin Consent
# 2. Should have Contributor and User Access Administrator.

name: Create Managed Identity, Federated Credential, Create/Deploy Function App

on: 
    workflow_dispatch:

permissions:
    id-token: write
    contents: read

env:
    AZURE_SUBSCRIPTION_ID: ${{ vars.AZURE_SUBSCRIPTION_ID }}
    AZURE_TENANT_ID: ${{ vars.AZURE_TENANT_ID }}
    RESOURCE_GROUP: hello-world-azfunction_group
    LOCATION: eastus
    UAMI_NAME: auto-uami
    FED_CRED_NAME: gha-federated-cred
    FUNCTIONAPP_NAME: az-auto-fucntion-app
    FUNCTIONAPP_RG: hello-world-azfunction_group
    ENV_NAME: dev
    REPO: ${{ github.repository }}
    OWNER: ${{ github.repository_owner }}
    STORAGE_ACCOUNT_NAME: autostorageaccount23
    PLAN_NAME: consumption
    NODE_VERSION: "20.x"
    ZIP_PATH: "."

jobs:
    create-and-deploy:
        runs-on: ubuntu-latest
        environment: dev

        steps:
        - name: Checkout Code
          uses: actions/checkout@v4
          
        - name: Azure Login via OIDC
          uses: azure/login@v1
          with:
            # Cliend ID of Azure Service Principal
            client-id: ${{ secrets.AZURE_CLIENT_ID }}
            tenant-id: ${{ env.AZURE_TENANT_ID }}
            subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

        #  To set default subscription context, if identity has no default context.
        - name: Set Subscription Context        
          run: |
            az account set --subscription "$AZURE_SUBSCRIPTION_ID"

        - name: Create User Assigned Managed Identity
          run: |
            az identity create --name "$UAMI_NAME" \
                --resource-group "$RESOURCE_GROUP" \
                --location "$LOCATION"

        - name: GET Managed Identity Details
          id: uami
          run: |
            CLIENT_ID=$(az identity show \
                --name "$UAMI_NAME" \
                --resource-group "$RESOURCE_GROUP" \
                --query 'clientId' -o tsv)
            
            PRINCIPAL_ID=$(az identity show \
                --name "$UAMI_NAME" \
                --resource-group "$RESOURCE_GROUP" \
                --query 'principalId' -o tsv)
            
            echo "client_id=$CLIENT_ID" >> $GITHUB_OUTPUT
            echo "principal_id=$PRINCIPAL_ID" >> $GITHUB_OUTPUT

        - name: Assign Website Contributor Role to UAMI
          run: |
            az role assignment create \
                --assignee-object-id ${{ steps.uami.outputs.principal_id}} \
                --assignee-principal-type ServicePrincipal \
                --role "Website Contributor" \
                --scope /subscriptions/${{env.AZURE_SUBSCRIPTION_ID}}/resourceGroups/${{env.FUNCTIONAPP_RG}}

        - name: Create Federated Credential
          run: |
            az identity federated-credential create \
                --name "$FED_CRED_NAME" \
                --identity-name "$UAMI_NAME" \
                --resource-group "$RESOURCE_GROUP" \
                --issuer "https://token.actions.githubusercontent.com" \
                --subject "repo:${{ env.REPO }}:environment:${{ env.ENV_NAME }}" \
                --audience "api://AzureADTokenExchange"

        - name: Check if Function App exists
          id: checkapp
          continue-on-error: true
          run: |
            az functionapp show \
                --name "$FUNCTIONAPP_NAME" \
                --resource-group "$FUNCTIONAPP_RG" > /dev/null

        - name: Create Storage Account (if app doesn't exist)
          if: steps.checkapp.outcome == 'failure'
          run: |
            az storage account create \
                --name "$STORAGE_ACCOUNT_NAME" \
                --location "$LOCATION" \
                --resource-group "$FUNCTIONAPP_RG" \
                --sku Standard_LRS

        - name: Create Function App (if app doesn't exist)
          if: steps.checkapp.outcome == 'failure'
          run: |
            az functionapp create \
                --consumption-plan-location "$LOCATION" \
                --name "$FUNCTIONAPP_NAME" \
                --os-type Windows \
                --resource-group "$FUNCTIONAPP_RG" \
                --runtime node \
                --storage-account "$STORAGE_ACCOUNT_NAME"

        - name: Re-login as UAMI (OIDC)
          uses: azure/login@v1
          with:
            client-id: ${{ steps.uami.outputs.client_id }}
            tenant-id: ${{ env.AZURE_TENANT_ID }}
            subscription-id: ${{ env.AZURE_SUBSCRIPTION_ID }}

        - name: Setup Node ${{ env.NODE_VERSION }} Environment
          uses: actions/setup-node@v4
          with:
            node-version: ${{ env.NODE_VERSION }}
    
        - name: 'Resolve Project Dependencies Using Npm'
          shell: bash
          run: |
            pushd './${{ env.ZIP_PATH }}'
            npm install
            npm run build --if-present
            npm run test --if-present
            popd
    
        - name: 'Run Azure Functions Action'
          uses: Azure/functions-action@v1
          with:
            app-name: ${{ env.FUNCTIONAPP_NAME }}
            package: ${{ env.ZIP_PATH }}
        